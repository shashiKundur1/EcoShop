# Modern E-commerce Store Project Report

## CHAPTER 1: INTRODUCTION

### 1.1 Introduction
The Modern E-commerce Store is a full-stack web application that provides a seamless online shopping experience. Built with modern technologies and best practices, it offers features like product browsing, cart management, secure checkout, and order tracking.

### 1.2 Overview
**Frontend Technologies:**
- React 18.3.1 with TypeScript
- Tailwind CSS for styling
- Vite for build tooling
- React Router for navigation
- Context API for state management
- Lucide React for icons
- React Hot Toast for notifications

**Backend Technologies:**
- Node.js with Express
- MongoDB for database
- Mongoose ODM
- JWT for authentication
- bcrypt for password hashing

### 1.3 Problem Statement
Traditional brick-and-mortar stores face limitations in reach and accessibility. There's a need for:
- 24/7 product availability
- Wider customer reach
- Efficient inventory management
- Secure payment processing
- Order tracking capabilities
- User-friendly shopping experience

### 1.4 Objectives
1. Create a responsive e-commerce platform
2. Implement secure user authentication
3. Provide real-time cart management
4. Enable secure payment processing
5. Offer order tracking functionality
6. Ensure efficient product categorization and search
7. Implement admin capabilities for product management

## CHAPTER 2: LITERATURE SURVEY

### 2.1 Literature Survey Review

1. **E-commerce Growth and Trends**
   - Global e-commerce sales reached $5.2 trillion in 2023
   - Mobile commerce accounts for 72.9% of e-commerce sales
   - Personalization increases conversion rates by 20%

2. **Technology Stack Analysis**
   - MERN Stack (MongoDB, Express, React, Node.js)
     - Benefits: Full JavaScript ecosystem, excellent performance, real-time capabilities
     - Used by companies like Walmart, Netflix, and Uber
   
   - TypeScript
     - Adds type safety and better developer experience
     - Reduces runtime errors by 15%
   
   - Tailwind CSS
     - Utility-first approach increases development speed
     - Reduces CSS bundle size by 35%

3. **Security Considerations**
   - JWT authentication provides stateless security
   - HTTPS encryption protects data in transit
   - Password hashing with bcrypt prevents breaches

## CHAPTER 3: SYSTEM REQUIREMENTS AND SPECIFICATION

### 3.1 Software Requirements
1. **Development Environment**
   - Node.js v18+
   - npm/yarn package manager
   - Git version control
   - VS Code or similar IDE

2. **Frontend Dependencies**
   - React v18.3.1
   - TypeScript v5.5.3
   - Tailwind CSS v3.4.1
   - Vite v5.4.2

3. **Backend Dependencies**
   - Express v4.18.2
   - MongoDB v6+
   - Mongoose v8.0.3
   - JWT v9.0.2

4. **Database**
   - MongoDB Atlas Cloud Database

### 3.2 Hardware Requirements
1. **Development Machine**
   - Processor: Intel Core i5 or equivalent
   - RAM: 8GB minimum
   - Storage: 256GB SSD
   - Internet: Broadband connection

2. **Production Server**
   - CPU: 2 cores minimum
   - RAM: 4GB minimum
   - Storage: 20GB minimum
   - Network: High-bandwidth connection

## CHAPTER 4: DESIGN

### 4.1 ER Diagram and Description

```
[User] 1 ----< [Orders] >---- N [Products]
   |
   |
   1
   |
   |
[Cart] >---- N [Products]
```

**Entities:**
1. User
   - Attributes: id, name, email, password, isAdmin
   - Primary Key: id

2. Product
   - Attributes: id, name, description, price, images, category, stock, rating
   - Primary Key: id

3. Cart
   - Attributes: id, userId, items(product_id, quantity)
   - Primary Key: id
   - Foreign Key: userId references User.id

4. Order
   - Attributes: id, userId, items, shippingAddress, paymentMethod, totalPrice
   - Primary Key: id
   - Foreign Key: userId references User.id

### 4.2 Seven Steps for ER to Schema Conversion

1. **Map Regular Entity Types**
   ```sql
   User(id, name, email, password, isAdmin)
   Product(id, name, description, price, images, category, stock, rating)
   ```

2. **Map Weak Entity Types**
   - No weak entities in the system

3. **Map Binary 1:1 Relationships**
   - User to Cart relationship
   ```sql
   Cart(id, user_id, created_at)
   ```

4. **Map Binary 1:N Relationships**
   - User to Orders relationship
   ```sql
   Order(id, user_id, shipping_address, payment_method, total_price)
   ```

5. **Map Binary M:N Relationships**
   - Cart Items relationship
   ```sql
   CartItem(cart_id, product_id, quantity)
   ```
   - Order Items relationship
   ```sql
   OrderItem(order_id, product_id, quantity, price)
   ```

6. **Map Multivalued Attributes**
   - Product images
   ```sql
   ProductImage(product_id, image_url)
   ```

7. **Map N-ary Relationships**
   - No N-ary relationships in the system

### 4.3 Schema Diagram

```
User {
  _id: ObjectId
  name: String
  email: String
  password: String
  isAdmin: Boolean
  timestamps: true
}

Product {
  _id: ObjectId
  name: String
  description: String
  price: Number
  images: [String]
  category: String
  stock: Number
  rating: Number
  numReviews: Number
  featured: Boolean
  timestamps: true
}

Cart {
  _id: ObjectId
  user: ObjectId (ref: User)
  items: [{
    product: ObjectId (ref: Product)
    quantity: Number
  }]
  timestamps: true
}

Order {
  _id: ObjectId
  user: ObjectId (ref: User)
  orderItems: [{
    product: ObjectId (ref: Product)
    name: String
    quantity: Number
    price: Number
    image: String
  }]
  shippingAddress: {
    address: String
    city: String
    postalCode: String
    country: String
  }
  paymentMethod: String
  totalPrice: Number
  isPaid: Boolean
  paidAt: Date
  isDelivered: Boolean
  deliveredAt: Date
  timestamps: true
}
```

### 4.4 Database Description

1. **Collections**
   - Users: Stores user account information
   - Products: Contains product catalog data
   - Carts: Manages shopping cart state
   - Orders: Tracks order history and status

2. **Relationships**
   - One-to-One: User to Cart
   - One-to-Many: User to Orders
   - Many-to-Many: Cart/Order to Products

3. **Indexes**
   - User email (unique)
   - Product category
   - Product name (text index)
   - Order user reference

4. **Data Integrity**
   - Foreign key constraints using Mongoose references
   - Required field validation
   - Custom validators for prices and quantities
   - Timestamps for auditing
